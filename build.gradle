/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        // add additional dependencies here if you wish to reference instead of generate them (see example directory)
    }
}

plugins {
    id 'maven-publish'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

apply plugin: 'eclipse'

apply plugin: 'com.bmuschko.nexus'

archivesBaseName = 'alpaca-java'
group = 'io.github.mainstringargs'
version = '4.0.1-SNAPSHOT'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven { url "https://repo.maven.apache.org/maven2" }
    jcenter()
    //maven { url "http://mvnrepository.com/artifact" }
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:20.0'
    compile "com.mashape.unirest:unirest-java:1.4.9"
    compile "com.google.code.gson:gson:2.8.5"
    compile "commons-lang:commons-lang:2.6"
    compile 'org.apache.logging.log4j:log4j-api:2.11.1'
    compile 'org.apache.logging.log4j:log4j-core:2.11.1'

    compile "javax.websocket:javax.websocket-api:1.1"
    compile "org.glassfish.tyrus.bundles:tyrus-standalone-client-jdk:1.12"

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

modifyPom {
    project {
        name 'alpaca-java'
        description 'Java API for Alpaca trading'
        url 'https://github.com/mainstringargs/alpaca-java'
        inceptionYear '2018'
        scm {
            url 'https://github.com/mainstringargs/alpaca-java'
            connection 'https://github.com/mainstringargs/alpaca-java.git'
            developerConnection 'https://github.com/mainstringargs/alpaca-java.git'
        }
        licenses {
            license {
                name 'MIT License'
                url 'https://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'mainstringargs'
                name 'main(String[] args)'
                email 'mainstringargs@github.io'
            }
        }
    }
}

// https://stackoverflow.com/questions/52205209/configure-gradle-build-to-suppress-javadoc-console-warnings
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}
nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
    packageGroup = "io.github.mainstringargs" //optional if packageGroup == project.getGroup()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/samplejson'
        }
    }
}

// The generated POJOs will be in a package structure analogous to the path in the 'sample_json/' directory
// See: https://github.com/joelittlejohn/jsonschema2pojo/wiki/Reference
task generatePOJOs() {
    final def targetDirectory = "${project.buildDir}/generated-sources/samplejson"
    final def jsonSourceDirectory = 'sample_json/'
    final def jsonPackageNameStart = "io.github.mainstringargs.domain."

    // Clear all generated sources
    delete targetDirectory

    // Loop through all directories in sample JSON file tree
    file(jsonSourceDirectory).eachDirRecurse { directory ->
        if (!directoryHasSubdirectory(directory)) { // Make sure there are no subdirectories
            def startPackageIndex = directory.getAbsolutePath().indexOf(jsonSourceDirectory) + jsonSourceDirectory.length()
            def targetPackage = jsonPackageNameStart + directory.getAbsolutePath()
                    .substring(startPackageIndex)
                    .replace('/', '.').replace('-', '').replace('_', '')
                    .toLowerCase()

            def jsonToPOJOTask = tasks.create('json2POJOTask-' + targetPackage, GradleBuild) {
                startParameter.projectProperties = ['source'         : directory.getAbsolutePath(),
                                                    'targetPackage'  : targetPackage,
                                                    'targetDirectory': targetDirectory]
                buildFile = 'sampleJson2Pojo.gradle'
                tasks = ['generateJsonSchema2Pojo']
            }

            dependsOn jsonToPOJOTask
        }
    }
}

static boolean directoryHasSubdirectory(File directory) {
    for (file in directory.listFiles()) {
        if (file.isDirectory()) {
            return true
        }
    }
    return false
}

compileJava {
    dependsOn generatePOJOs
}

build.finalizedBy(publishToMavenLocal)

if (hasProperty('buildScan')) {
    buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }
}

startScripts {
    classpath += files('resources')
}

//mainClassName = 'io.github.mainstringargs.alpaca.AlpacaExample'
mainClassName = 'io.github.mainstringargs.polygon.PolygonExample'
