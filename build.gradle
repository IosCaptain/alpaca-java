import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "java"
    id "java-library"

    // Adapted JSONSchema2POJO plugin
    id "jsonschema2pojo-adapted"

    // OpenAPI Generator
    id "org.openapi.generator" version "7.3.0"

    // Gradle versions plugin
    id "com.github.ben-manes.versions" version "0.51.0"

    // For Maven Central publishing
    id "maven-publish"
    id "signing"
}

final def projectGroup = "net.jacobpeterson.alpaca"
final def projectArtifactID = "alpaca-java"
final def projectVersion = "10.0.0-SNAPSHOT"

group = projectGroup
version = projectVersion

repositories {
    mavenCentral()
}

dependencies {
    // Logging framework
    implementation group: "org.slf4j", name: "slf4j-api", version: "2.1.0-alpha1"
    // Require dependencies that use the Apache Jakarta Commons Logging library to use SLF4j instead
    implementation group: "org.slf4j", name: "jcl-over-slf4j", version: "2.1.0-alpha1"

    // Google Guava
    implementation group: "com.google.guava", name: "guava", version: "33.0.0-jre"

    // GSON
    implementation group: "com.google.code.gson", name: "gson", version: "2.10.1"

    // OkHttp
    implementation group: "com.squareup.okhttp3", name: "okhttp", version: "5.0.0-alpha.12"
    implementation group: "com.squareup.okhttp3", name: "logging-interceptor", version: "5.0.0-alpha.12"

    // Libraries used by the OpenAPI generated client libraries
    implementation group: "jakarta.annotation", name: "jakarta.annotation-api", version: "1.3.5"
    implementation group: "org.openapitools", name: "jackson-databind-nullable", version: "0.2.6"
    implementation group: "io.gsonfire", name: "gson-fire", version: "1.9.0"
}

// Exclude any SLF4j-implementation transitive dependencies so users can use a logging framework of their choice
configurations.implementation {
    exclude group: "commons-logging", module: "commons-logging"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

javadoc {
    options.addStringOption("source", "17")
    options.addStringOption("Xdoclint:none", "-quiet") // Suppress Javadoc linting warnings
    options.addStringOption("charset", "UTF-8")
    options.addStringOption("link", "https://docs.oracle.com/javase/8/docs/api/")
}

//
// BEGIN Alpaca OpenAPI Specification (OAS) client generation
//

// These IDs come from the URLs on this page: https://docs.alpaca.markets/v1.1/openapi
final def specIDsOfFileNames = Map.of(
        "trader.json", "657760422129f9005cf4bd58",
        "broker.json", "657771fc2471d20070183049",
        "market-data.json", "6577704d1fb6b9007032bf39")
final File specDownloadPath = new File(project.layout.buildDirectory.get().getAsFile(),
        "/download/openapi/")
final File generatedClientLibrariesPath = new File(project.layout.buildDirectory.get().getAsFile(),
        "/generated/openapi/")

final def generateAllOpenAPIClientsTasks = tasks.register("generateAllOpenAPIClients") {
    doLast {
        fixOpenAPIGeneratedClientIssues(generatedClientLibrariesPath)
    }
}
compileJava.dependsOn generateAllOpenAPIClientsTasks

def downloadOpenAPISpecFilesTask = tasks.register("downloadOpenAPISpecFiles") {
    configure {
        outputs.dir(specDownloadPath)
    }

    doLast {
        // Download spec files
        specIDsOfFileNames.forEach { fileName, alpacaSpecID ->
            final def outputFile = new File(specDownloadPath, fileName)
            final def specURL = "https://docs.alpaca.markets/v1.1/openapi/${alpacaSpecID}"
            outputFile.getParentFile().mkdirs()
            try {
                logger.info("Downloading OpenAPI spec file from: {}", specURL)
                new URL(specURL).withInputStream { inputStream -> outputFile.withOutputStream { it << inputStream } }
                logger.info("Successfully downloaded OpenAPI spec file to: {}", outputFile.getPath())
            } catch (IOException ioException) {
                throw new RuntimeException("Could not download OpenAPI spec file!", ioException)
            }
        }

        // Fix an issue in the Broker spec file that uses an empty string as an object key for some reason
        // TODO remove this when issue is fixed by Alpaca
        final def brokerSpecFile = new File(specDownloadPath, "broker.json")
        brokerSpecFile.text = brokerSpecFile.text
                .replace(",\"\":{\"type\":\"string\",\"x-stoplight\":{\"id\":\"1zg5jnb6rzdoo\"}}", "")
    }
}

for (def specFileName : specIDsOfFileNames.keySet()) {
    final def specName = specFileName.replace(".json", "")
    final def inputSpecFile = new File(specDownloadPath, specFileName)
    final def outputDirectory = new File(generatedClientLibrariesPath, specName)

    // Add source set of OpenAPI generated client library
    sourceSets {
        main {
            java {
                srcDir new File(outputDirectory, "src/main/java/").getPath()
            }
        }
    }

    // Register and configure OpenAPI generate task
    final def generateTask = tasks.register("generateOpenAPIClientFor-" + specName, GenerateTask) {
        dependsOn {
            downloadOpenAPISpecFilesTask
        }

        it.onlyIf {
            !downloadOpenAPISpecFilesTask.get().state.upToDate &&
                    downloadOpenAPISpecFilesTask.get().state.failure == null &&
                    !downloadOpenAPISpecFilesTask.get().state.skipped &&
                    downloadOpenAPISpecFilesTask.get().state.executed
        }

        configure {
            inputs.file(inputSpecFile)
            outputs.dir(outputDirectory)
        }

        generatorName.set("java")
        inputSpec.set(inputSpecFile.getPath())
        outputDir.set(outputDirectory.getPath())
        final def destinationPackage = projectGroup + ".openapi." + specName.replace("-", "")
        configOptions.set(Map.of(
                "artifactId", specName,
                "artifactVersion", "1.0.0-SNAPSHOT",
                "groupId", destinationPackage,
                "invokerPackage", destinationPackage,
                "apiPackage", destinationPackage + ".api",
                "modelPackage", destinationPackage + ".model",
                "library", "okhttp-gson",
                "documentationProvider", "none"))
        cleanupOutput.set(true)
        validateSpec.set(false)
        skipValidateSpec.set(true)
        generateModelTests.set(false)
        generateModelDocumentation.set(false)
        generateApiTests.set(false)
        generateApiDocumentation.set(false)
    }
    generateAllOpenAPIClientsTasks.configure {
        dependsOn generateTask
    }
}

static void fixOpenAPIGeneratedClientIssues(File generatedClientLibrariesPath) {
    // Fix broker spec generated client issues with discriminators
    // on some enums: https://github.com/OpenAPITools/openapi-generator/issues/806
    final def brokerTransferDataJavaFile = new File(generatedClientLibrariesPath,
            "broker/src/main/java/net/jacobpeterson/alpaca/openapi/broker/model/TransferData.java")
    brokerTransferDataJavaFile.text = brokerTransferDataJavaFile.text
            .replace("this.transferType = this.getClass().getSimpleName();", "")
    final def brokerTransferResourceJavaFile = new File(generatedClientLibrariesPath,
            "broker/src/main/java/net/jacobpeterson/alpaca/openapi/broker/model/TransferResource.java")
    brokerTransferResourceJavaFile.text = brokerTransferResourceJavaFile.text
            .replace("this.type = this.getClass().getSimpleName();", "")
}

//
// END Alpaca OpenAPI Specification (OAS) client generation
//

//
// BEGIN Publishing
//

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = projectGroup
            artifactId = projectArtifactID
            version = projectVersion

            pom {
                name = projectArtifactID
                description = "A Java API for Alpaca, the commission free, algo friendly, stock trading broker."
                url = "https://github.com/Petersoj/alpaca-java"
                inceptionYear = "2018"

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }

                developers {
                    developer {
                        id = "Petersoj"
                        name = "Jacob Peterson"
                    }
                    developer {
                        id = "mainstringargs"
                        name = "main(String[] args)"
                    }
                }

                scm {
                    url = "https://github.com/Petersoj/alpaca-java.git"
                    connection = "scm:git:https://github.com/Petersoj/alpaca-java.git"
                    developerConnection = "scm:git:git@github.com/Petersoj/alpaca-java.git"
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = projectVersion.contains("SNAPSHOT") ? "https://oss.sonatype.org/content/repositories/snapshots/" :
                    "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.property("nexus.username")
                password = project.property("nexus.password")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

// Used to prevent accidental publication of Alpaca keys
processResources {
    exclude("alpaca.properties")
}

//
// END Publishing
//
